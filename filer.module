<?php
/**
 * @file
 * This is the file description for Filer module.
 *
 * In this more verbose, multi-line description, you can specify what this
 * file does exactly. Make sure to wrap your documentation in column 78 so
 * that the file can be displayed nicely in default-sized consoles.
 */

/**
 * Implements hook_permission().
 */
function filer_permission() {
  return array(
    'use filer' =>  array(
      'title' => t('Access filer media manager.'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function filer_menu() {
  $items['filer/browser'] = array(
    'title' => 'Filer Media Manager',
    'page callback' => '_filer_loader',
    'access arguments' => array('use filer'),
    'type' => MENU_CALLBACK,
    'delivery callback' =>'_filer_deliver_html_page',
  );

	$items['filer/browser/%'] = array(
	  'title' => 'Filer Media Manager',
	  'page callback' => '_filer_loader',
	  'access arguments' => array('use filer'),
		'page arguments' => array(2),
	  'type' => MENU_CALLBACK,
    'delivery callback' =>'_filer_deliver_html_page',
	);

  return $items;
}


function _filer_make_scale_and_crop_image_style($width, $height) {
  return array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => $width, 'height' => $height),
        'weight' => 0,
      ),
    ),
  );
}


/**
 * Implements hook_image_default_styles().
 */
function filer_image_default_styles() {
  $styles = array();
	$styles['filer_icon_48'] = _filer_make_scale_and_crop_image_style(128, 128);
  return $styles;
}


/**
 * Implements hook_library().
 */
function filer_library() {
  $path = drupal_get_path('module', 'filer');
  
  $common = array(
    'website' => 'http://www.brightec.co.uk',
    'version' => '7.x',
  );

  /**
   * Common resources
   */
  $libraries['filer_base'] = array(
    'title' => 'Filer base',
    'js' => array(
      $path . '/js/filer-core.js' => array('group' => JS_LIBRARY, 'weight' => - 5),
    ),
    'css' => array(
      $path . '/css/filer.css',
    ),
  ); 
  
  /**
   * Resources for launching the browser
   */
  $libraries['filer_launcher'] = array(
    'title' => 'Filer launcher libraries',
    'js' => array(
      $path . '/js/filer-launcher.js' => array('group' => JS_DEFAULT),
    ),
    'dependencies' => array(
      array('filer', 'filer_base'),
      array('system', 'ui.dialog'),
    ),
  );
  
  /**
   * Resources for the browser itself
   */
  $libraries['filer_browser'] = array(
    'title' => 'Filer browser libraries',
    'js' => array(
      $path . '/js/filer-browser.js' => array('group' => JS_DEFAULT),
    ),
    'dependencies' => array(
      array('filer', 'filer_base'),
      array('system', 'ui.dialog'),
    ),
  );
 
  foreach ($libraries as &$library) {
    $library += $common;
  }
  
  return $libraries; 
}


/**
 * Implements hook_theme().
 */
function filer_theme($existing, $type, $theme, $path) {
  return array(
    'filer_ui' => array(
      'template' => 'templates/ui',
			'variables' => array('folders' => array(), 'files' => array(), 'form' => ''),
    ),
    'filer_uploader' => array(
      'template' => 'templates/upload',
      'variables' => array('form' => ''),
    ),
    'filer_dialog_page' => array(
      'render element' => 'page',
      'template' => 'templates/page',
    ),    
		'image_style_outside_files' => array(
			'variables' => array(
				'style_name' => NULL,
				'path' => NULL,
				'alt' => '',
				'title' => NULL,
				'attributes' => array(),
			),
		),
  );
}


/**
 * This theme function is designed to deal with the limitation that
 * theme_image_style does not work with images outside the files directory.
 * 
 * Usage is the same as theme_image_style.
 * 
 * @param $variables
 */
function theme_image_style_outside_files($variables) {
  $styled_path = image_style_path($variables['style_name'], $variables['path']);
  if (!file_exists($styled_path)) {
    $style = image_style_load($variables['style_name']);
    image_style_create_derivative($style, $variables['path'], $styled_path);
  }
  $variables['path'] = $styled_path;
  return theme('image', $variables);
}


/**
 * undocumented function
 *
 * @return void
 * @author Cameron Cooke
 */
function _filer_upload_form($form_id, $args, $folder_id) {
  $form = array();
  
  $form['render'] = array(
    '#type' => 'hidden',
    '#value' => isset($_GET['render']) ? $_GET['render'] : '',
  );  
  
  $form['folder_id'] = array(
    '#type' => 'hidden',
    '#value' => $folder_id,
  );
  
  $form['upload_fid'] = array(
    '#type' => 'file',
    '#title' => t('Upload'),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Upload',
  );
  
  return $form;
}


/**
 * undocumented function
 *
 * @param string $form 
 * @param string $form_state 
 * @param string $extra 
 * @return void
 * @author Cameron Cooke
 */
function _filer_upload_form_submit($form, &$form_state) {
  
  global $base_url;

  if(isset($_FILES) && is_uploaded_file($_FILES['files']['tmp_name']['upload_fid'])) {
    $file = file_save_upload('upload_fid', array(), file_default_scheme() . '://');
    $file->status = FILE_STATUS_PERMANENT;
    $file = file_save($file);
    
    db_update('file_managed')->fields(array(
      'folder_id' => $form_state['values']['folder_id'],
    ))
    ->condition('fid', $file->fid, '=')
    ->execute();
    
    drupal_set_message(t('The file :filename was successfully uploaded.', array(':filename' => $file->filename)));
  }
  
  $path = t($base_url . '/filer/browser/?render=@render&folder_id=@folder_id', array('@render' => $form_state['values']['render'], '@folder_id' => $form_state['values']['folder_id']));
  drupal_goto($path);
}



/**
 * Menu callback that loads the media manager UI.
 */
function _filer_loader($folder_id = 1) {
	
	$image_mimes = array(
		'image/gif',
    'image/jpeg',
    'image/png',
	);
	
	// get folders
	$result = db_query("SELECT folder_id, name FROM {folder} WHERE parent_folder_id = :folder_id", array(':folder_id' => $folder_id));
	$folders = $result->fetchAll();
	
	// get images
	$result = db_query("SELECT fid, filename, uri, filemime, folder_id FROM {file_managed} WHERE folder_id = :folder_id", array(':folder_id' => $folder_id));
	$files = $result->fetchAll();

	foreach($files as $delta => $file) {
		
		$files[$delta]->url = file_create_url($file->uri);
		
		if(in_array($file->filemime, $image_mimes)) {
			$files[$delta]->content = theme('image_style', array('style_name' => 'filer_icon_48', 'path' => $file->uri));
		}
		else {
			$icon = drupal_get_path('module', 'filer') . '/images/unknown48.jpg';
			$files[$delta]->content = theme('image_style_outside_files', array('style_name' => 'filer_icon_48', 'path' => $icon));
		}
	}
		
	/**
	 * Create render array
	 */
	$render =  array(
	 '#theme' => 'filer_ui',
	 '#folders' => $folders,
	 '#files' => $files,
	 '#form' => theme('filer_uploader', array('form' => render(drupal_get_form('_filer_upload_form', $folder_id)))),
	);
	$render['#attached']['library'][] = array('filer', 'filer_browser');
	
	return $render;
}

/**
 * Implements hook_wysiwyg_include_directory().
 */
function filer_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      return 'wysiwyg-plugins';
  }
}

/**
 * Add messages to the page.
 */
function template_preprocess_filer_dialog_page(&$variables) {
  $variables['messages'] = theme('status_messages');
}

/**
 * Implements hook_page_alter().
 */
// function filer_page_alter(&$page) {
//   if (isset($_GET['render']) && $_GET['render'] == 'filer-popup') {
//     $page['#theme'] = 'filer_dialog_page';
//     // temporary fix while awaiting fix for 914786
//     if (module_exists('admin_menu')) {
//       admin_menu_suppress();
//     }
//     foreach (element_children($page) as $key) {
//       if ($key != 'content') {
//         unset($page[$key]);
//       }
//     }        
//   }
// }

/*
 * Delivery callback for changing the page template used.
 */
function _filer_deliver_html_page($page_callback_result) {
  // Emit the correct charset HTTP header, but not if the page callback
  // result is NULL, since that likely indicates that it printed something
  // in which case, no further headers may be sent, and not if code running
  // for this page request has already set the content type header.
  if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  }
  
  print _filer_render_page($page_callback_result);
  
  // Perform end-of-request tasks.
  drupal_page_footer();    
}

function _filer_render_page($page) {
  $main_content_display = &drupal_static('system_main_content_added', FALSE);

  // Allow menu callbacks to return strings or arbitrary arrays to render.
  // If the array returned is not of #type page directly, we need to fill
  // in the page with defaults.
  if (is_string($page) || (is_array($page) && (!isset($page['#type']) || ($page['#type'] != 'page')))) {
    drupal_set_page_content($page);
    $page = element_info('page');
  }

  // Modules can add elements to $page as needed in hook_page_build().
  foreach (module_implements('page_build') as $module) {
    $function = $module . '_page_build';
    $function($page);
  }
  // Modules alter the $page as needed. Blocks are populated into regions like
  // 'sidebar_first', 'footer', etc.
  drupal_alter('page', $page);

  // If no module has taken care of the main content, add it to the page now.
  // This allows the site to still be usable even if no modules that
  // control page regions (for example, the Block module) are enabled.
  if (!$main_content_display) {
    $page['content']['system_main'] = drupal_set_page_content();
  }
  
  // change page template if in popup
  if (isset($_GET['render']) && $_GET['render'] == 'filer-popup') {

    // change theme
    $page['#theme'] = 'filer_dialog_page';
  
    /* remove admin menu */
    if (module_exists('admin_menu')) {
      admin_menu_suppress();
    }
    foreach (element_children($page) as $key) {
      if ($key != 'content') {
        unset($page[$key]);
      }
    } 
  }
  
  return drupal_render($page);  
}